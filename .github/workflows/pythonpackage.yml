name: Python package

on:
  create:
    tags:
    - v*
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

jobs:
  test:
    name: "Test ${{ matrix.python-version }} on ${{ matrix.os }}, ${{ matrix.arch }}"
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        python-version: ['36', pypy3]
        os: [ubuntu-latest, windows-latest]
        arch: [aarch64, x86_64]
        exclude:
          - arch: aarch64
            os: windows-latest
          - arch: aarch64
            python-version: pypy3
    env:
      python: /opt/python/cp3${{ matrix.python-version }}-*/bin/python
      img: quay.io/pypa/manylinux2014_${{ matrix.arch }}
      python-version: ${{ matrix.python-version }}
      os: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: |
        git submodule init
        git submodule update
    - name: Set up Python pypy3
      if : ${{ matrix.python-version }} == 'pypy3'
      uses: actions/setup-python@v2
      with:
        python-version: pypy3
    - name: Set up Python ${{ matrix.python-version }}
      if : ${{ matrix.python-version != 'pypy3' && matrix.os == 'windows-latest' }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Set up QEMU
      if : ${{ matrix.os != 'windows-latest' }}
      id: qemu
      uses: docker/setup-qemu-action@v1
    - name: Install dependencies windows-latest or pypy3
      if : ${{ matrix.python-version == 'pypy3' || matrix.os == 'windows-latest' }}
      run: |
          python -m pip install --upgrade pip
          pip install -e .
    - name: Install dependencies linux or non pypy3
      if : ${{ matrix.python-version != 'pypy3' && matrix.os != 'windows-latest' }}
      run: |
            docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.python }} -m pip install virtualenv && ${{ env.python }} -m venv .env && \
            source .env/bin/activate && \
            python -m pip install --upgrade pip && \
            pip install -e . && \
            deactivate'

    - name: Test with pytest windows-latest or pypy3
      if : ${{ matrix.python-version == 'pypy3' || matrix.os == 'windows-latest' }}
      run: |
          pip install pytest
          pytest jellyfish/test.py
    - name: Test with pytest windows-latest or pypy3
      if : ${{ matrix.python-version != 'pypy3' && matrix.os != 'windows-latest' }}
      run: |
          docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '\
            source .env/bin/activate && \
            pip install pytest && \
            pytest jellyfish/test.py && \
            deactivate'

  build:
    name: "Build ${{ matrix.python-version }} on ${{ matrix.os }}"
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      matrix:
        #python-version: ['3.6', '3.7', '3.8', '3.9']
        python-version: ['3.6']
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
        - os: ubuntu-latest
          python-version: pypy3

    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      run: |
        git submodule init
        git submodule update
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: python -m pip install --upgrade pip build

    - name: Build package
      run: python -m build

    - uses: actions/upload-artifact@v2
      if: always()
      with:
        name: artifacts
        path: dist/*

  publish:
    name: Publish release
    runs-on: ubuntu-latest
    needs:
    - build

    # Only publish tags
    if: github.event_name == 'create' && github.event.ref_type == 'tag'

    steps:
    - uses: actions/download-artifact@v2
      with:
        name: artifacts
        path: dist

    - name: Push build artifacts to PyPI
      uses: pypa/gh-action-pypi-publish@v1.4.1
      with:
        skip_existing: true
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

